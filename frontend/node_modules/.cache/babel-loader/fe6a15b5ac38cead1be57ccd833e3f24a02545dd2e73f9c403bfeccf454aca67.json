{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Configuration d'axios pour inclure le token dans les requêtes\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Gestion des erreurs de réponse\naxios.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const channelService = {\n  getAllChannels: () => api.get('/api/channels'),\n  getChannel: id => api.get(`/api/channels/${id}`),\n  createChannel: channel => api.post('/api/channels', null, {\n    params: {\n      title: channel.title,\n      description: channel.description,\n      date: channel.date,\n      duration: channel.duration,\n      ownerId: channel.ownerId\n    }\n  }),\n  updateChannel: (id, channel) => api.patch(`/api/channels/${id}`, null, {\n    params: {\n      title: channel.title,\n      description: channel.description,\n      date: channel.date,\n      duration: channel.duration\n    }\n  }),\n  deleteChannel: id => api.delete(`/api/channels/${id}`)\n};\nexport const userService = {\n  getUserChannels: userId => api.get(`/api/users/${userId}/channels`)\n};\nexport const messageService = {\n  getMessages: channelId => api.get(`/api/channels/${channelId}/messages`),\n  sendMessage: (channelId, message) => api.post(`/api/channels/${channelId}/messages`, message)\n};\nexport const login = async (email, password) => {\n  const response = await axios.post(`${API_URL}/auth/login`, {\n    email,\n    password\n  });\n  return response.data;\n};\nexport const register = async userData => {\n  const response = await axios.post(`${API_URL}/auth/register`, userData);\n  return response.data;\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  window.location.href = '/login';\n};\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('user');\n  return user ? JSON.parse(user) : null;\n};\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","channelService","getAllChannels","get","getChannel","id","createChannel","channel","post","params","title","description","date","duration","ownerId","updateChannel","patch","deleteChannel","delete","userService","getUserChannels","userId","messageService","getMessages","channelId","sendMessage","message","login","email","password","data","register","userData","logout","getCurrentUser","user","JSON","parse","isAuthenticated"],"sources":["/Users/eliotmalsert/Code/SR03/sr03devoir2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Configuration d'axios pour inclure le token dans les requêtes\naxios.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Gestion des erreurs de réponse\naxios.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response?.status === 401) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            window.location.href = '/login';\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport const channelService = {\n  getAllChannels: () => api.get('/api/channels'),\n  getChannel: (id) => api.get(`/api/channels/${id}`),\n  createChannel: (channel) => api.post('/api/channels', null, {\n    params: {\n      title: channel.title,\n      description: channel.description,\n      date: channel.date,\n      duration: channel.duration,\n      ownerId: channel.ownerId\n    }\n  }),\n  updateChannel: (id, channel) => api.patch(`/api/channels/${id}`, null, {\n    params: {\n      title: channel.title,\n      description: channel.description,\n      date: channel.date,\n      duration: channel.duration\n    }\n  }),\n  deleteChannel: (id) => api.delete(`/api/channels/${id}`),\n};\n\nexport const userService = {\n  getUserChannels: (userId) => api.get(`/api/users/${userId}/channels`),\n};\n\nexport const messageService = {\n  getMessages: (channelId) => api.get(`/api/channels/${channelId}/messages`),\n  sendMessage: (channelId, message) => api.post(`/api/channels/${channelId}/messages`, message),\n};\n\nexport const login = async (email, password) => {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n    });\n    return response.data;\n};\n\nexport const register = async (userData) => {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    return response.data;\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n};\n\nexport const getCurrentUser = () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n};\n\nexport const isAuthenticated = () => {\n    return !!localStorage.getItem('token');\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}