{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getCurrentUser, isAuthenticated } from '../services/api';\nexport const useAuth = (shouldRedirect = true) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const userData = await getCurrentUser();\n        setUser(userData);\n        if (!userData && shouldRedirect) {\n          navigate('/login');\n        }\n      } catch (error) {\n        console.error('Error checking auth:', error);\n        if (shouldRedirect) {\n          navigate('/login');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, [navigate, shouldRedirect]);\n  return {\n    user,\n    loading\n  };\n};\n_s(useAuth, \"lk6viekuCMMpYORkLYLEq0Wsfds=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","getCurrentUser","isAuthenticated","useAuth","shouldRedirect","_s","user","setUser","loading","setLoading","navigate","checkAuth","userData","error","console"],"sources":["/Users/eliotmalsert/Code/SR03/sr03devoir2/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getCurrentUser, isAuthenticated } from '../services/api';\n\nexport const useAuth = (shouldRedirect = true) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const checkAuth = async () => {\n            try {\n                const userData = await getCurrentUser();\n                setUser(userData);\n                if (!userData && shouldRedirect) {\n                    navigate('/login');\n                }\n            } catch (error) {\n                console.error('Error checking auth:', error);\n                if (shouldRedirect) {\n                    navigate('/login');\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        checkAuth();\n    }, [navigate, shouldRedirect]);\n\n    return { user, loading };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,EAAEC,eAAe,QAAQ,iBAAiB;AAEjE,OAAO,MAAMC,OAAO,GAAGA,CAACC,cAAc,GAAG,IAAI,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMY,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMX,cAAc,CAAC,CAAC;QACvCM,OAAO,CAACK,QAAQ,CAAC;QACjB,IAAI,CAACA,QAAQ,IAAIR,cAAc,EAAE;UAC7BM,QAAQ,CAAC,QAAQ,CAAC;QACtB;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAIT,cAAc,EAAE;UAChBM,QAAQ,CAAC,QAAQ,CAAC;QACtB;MACJ,CAAC,SAAS;QACND,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDE,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACD,QAAQ,EAAEN,cAAc,CAAC,CAAC;EAE9B,OAAO;IAAEE,IAAI;IAAEE;EAAQ,CAAC;AAC5B,CAAC;AAACH,EAAA,CA3BWF,OAAO;EAAA,QAGCH,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}