{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // Permet l'envoi des cookies avec les requêtes\n});\n\n// Configuration d'axios pour inclure le token JWT dans les headers\napi.interceptors.request.use(async config => {\n  var _document$cookie$spli;\n  // Récupérer le token depuis le cookie\n  const token = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('jwt='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Gestion des erreurs de réponse\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // On ne redirige plus automatiquement\n    console.log('Session expirée');\n  }\n  return Promise.reject(error);\n});\nexport const channelService = {\n  getAllChannels: () => api.get('/api/channels'),\n  getChannel: id => api.get(`/api/channels/${id}`),\n  createChannel: channel => api.post('/api/channels', channel),\n  updateChannel: (id, channel) => api.patch(`/api/channels/${id}`, channel),\n  deleteChannel: id => api.delete(`/api/channels/${id}`)\n};\nexport const userService = {\n  getUserChannels: userId => api.get(`/api/users/${userId}/channels`),\n  getCurrentUserChannels: async user => {\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    const response = await api.get(`/api/users/${user.userId}/channels`);\n    return response.data;\n  }\n};\nexport const messageService = {\n  getMessages: channelId => api.get(`/api/channels/${channelId}/messages`),\n  sendMessage: (channelId, message) => api.post(`/api/channels/${channelId}/messages`, message)\n};\nexport const login = async (email, password) => {\n  const response = await api.post('/api/auth/login', {\n    email,\n    password\n  });\n  return response.data;\n};\nexport const register = async userData => {\n  const response = await api.post('/api/auth/register', userData);\n  return response.data;\n};\nexport const logout = async () => {\n  await api.post('/api/auth/logout');\n  // On ne redirige plus ici\n};\nexport const getCurrentUser = async () => {\n  try {\n    const response = await api.get('/api/auth/me');\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};\nexport const isAuthenticated = async () => {\n  try {\n    await api.get('/api/auth/me');\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","_document$cookie$spli","token","document","cookie","split","find","row","startsWith","Authorization","error","Promise","reject","response","_error$response","status","console","log","channelService","getAllChannels","get","getChannel","id","createChannel","channel","post","updateChannel","patch","deleteChannel","delete","userService","getUserChannels","userId","getCurrentUserChannels","user","Error","data","messageService","getMessages","channelId","sendMessage","message","login","email","password","register","userData","logout","getCurrentUser","isAuthenticated"],"sources":["/Users/eliotmalsert/Code/SR03/sr03devoir2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  withCredentials: true // Permet l'envoi des cookies avec les requêtes\n});\n\n// Configuration d'axios pour inclure le token JWT dans les headers\napi.interceptors.request.use(\n    async (config) => {\n        // Récupérer le token depuis le cookie\n        const token = document.cookie\n            .split('; ')\n            .find(row => row.startsWith('jwt='))\n            ?.split('=')[1];\n\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Gestion des erreurs de réponse\napi.interceptors.response.use(\n    (response) => response,\n    (error) => {\n        if (error.response?.status === 401) {\n            // On ne redirige plus automatiquement\n            console.log('Session expirée');\n        }\n        return Promise.reject(error);\n    }\n);\n\nexport const channelService = {\n  getAllChannels: () => api.get('/api/channels'),\n  getChannel: (id) => api.get(`/api/channels/${id}`),\n  createChannel: (channel) => api.post('/api/channels', channel),\n  updateChannel: (id, channel) => api.patch(`/api/channels/${id}`, channel),\n  deleteChannel: (id) => api.delete(`/api/channels/${id}`),\n};\n\nexport const userService = {\n  getUserChannels: (userId) => api.get(`/api/users/${userId}/channels`),\n  getCurrentUserChannels: async (user) => {\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    const response = await api.get(`/api/users/${user.userId}/channels`);\n    return response.data;\n  }\n};\n\nexport const messageService = {\n  getMessages: (channelId) => api.get(`/api/channels/${channelId}/messages`),\n  sendMessage: (channelId, message) => api.post(`/api/channels/${channelId}/messages`, message),\n};\n\nexport const login = async (email, password) => {\n    const response = await api.post('/api/auth/login', {\n        email,\n        password\n    });\n    return response.data;\n};\n\nexport const register = async (userData) => {\n    const response = await api.post('/api/auth/register', userData);\n    return response.data;\n};\n\nexport const logout = async () => {\n    await api.post('/api/auth/logout');\n    // On ne redirige plus ici\n};\n\nexport const getCurrentUser = async () => {\n    try {\n        const response = await api.get('/api/auth/me');\n        return response.data;\n    } catch (error) {\n        return null;\n    }\n};\n\nexport const isAuthenticated = async () => {\n    try {\n        await api.get('/api/auth/me');\n        return true;\n    } catch (error) {\n        return false;\n    }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}